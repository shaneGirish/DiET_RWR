/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package diet.client;

import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.JButton;

/**
 *
 * @author sre
 */
public class JPanelSubliminalStimuli extends javax.swing.JPanel {

	public String text = "";
	Color textColour;
	String nameOfPane;
	int positionX;
	int positionY;

	BufferedImage bi;

	/**
	 * Creates new form JFrameSubliminalPanel
	 */
	public JPanelSubliminalStimuli() {
		initComponents();

	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 400, Short.MAX_VALUE));
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 300, Short.MAX_VALUE));
	}// </editor-fold>//GEN-END:initComponents
		// Variables declaration - do not modify//GEN-BEGIN:variables
		// End of variables declaration//GEN-END:variables

	public void displayImage(BufferedImage bi) {
		this.text = "";
		Graphics g = this.getGraphics();
		if (bi != null) {
			this.bi = bi;
			g.drawImage(bi, 0, 0, null);
		}
	}

	public void displayText(String text, Color textColour, BufferedImage bi, int positionX, int positionY) {
		try {
			if (text == null)
				text = "";
			this.text = text;
			this.positionX = positionX;
			this.positionY = positionY;
			Graphics g = this.getGraphics();
			if (bi != null) {
				this.bi = bi;
				g.drawImage(bi, 0, 0, null);
			}

			Graphics2D g2d = (Graphics2D) g;
			int screenRes = Toolkit.getDefaultToolkit().getScreenResolution();
			int fontSize = (int) Math.round(25.0 * screenRes / 72.0);
			Font font = new Font("Arial", Font.PLAIN, fontSize);
			g2d.setFont(font);
			g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
			g.setColor(textColour);
			// g.drawString(text, positionX, positionY);

			int fontHeight = g.getFontMetrics().getHeight();
			String split[] = text.split("\n");
			for (int i = 0; i < split.length; i++) {
				g.drawString(split[i], positionX, positionY + (i * fontHeight));
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	public void paint(Graphics g) {
		super.paint(g);
		try {
			if (bi != null) {
				this.bi = bi;
				g.drawImage(bi, 0, 0, null);
			}

			Graphics2D g2d = (Graphics2D) g;
			int screenRes = Toolkit.getDefaultToolkit().getScreenResolution();
			int fontSize = (int) Math.round(25.0 * screenRes / 72.0);
			Font font = new Font("Arial", Font.PLAIN, fontSize);
			g2d.setFont(font);
			g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
			g.setColor(textColour);
			// g.drawString(text, positionX, positionY);

			int fontHeight = g.getFontMetrics().getHeight();
			String split[] = text.split("\n");
			for (int i = 0; i < split.length; i++) {
				g.drawString(split[i], positionX, positionY + (i * fontHeight));
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		// System.err.println("PAINT1");
		// g.d
	}

	public void repaint() {
		super.repaint();
		System.err.println("PAINT2");
	}

	static public void sleepForTime(long milliseconds) {
		try {
			Thread.sleep(milliseconds);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	// check out the Long.MAX_VALUE hack

}
