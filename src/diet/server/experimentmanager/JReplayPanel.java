/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package diet.server.experimentmanager;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Insets;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Hashtable;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JToggleButton;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author gj
 */
public class JReplayPanel extends javax.swing.JPanel {

	JTable jt;
	JScrollPane jsp;
	JLabel jLabel1 = new JLabel("PLACEHOLDERTEXT");
	JButton jb = new JButton("LOAD");

	public static void main(String[] args) {
		JReplayPanel jrp = new JReplayPanel();
	}

	/**
	 * Creates new form JReplayPanel
	 */
	public JReplayPanel() {

		initComponents();

		JPanel jpNorth = new JPanel();
		jpNorth.setLayout(new BorderLayout());
		jpNorth.add(jLabel1, BorderLayout.WEST);
		jpNorth.add(jb, BorderLayout.EAST);
		this.add(jpNorth, BorderLayout.NORTH);

		jt = new JTable();
		jt.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
		jt.setFillsViewportHeight(true);
		jt.setModel(new JReplayTableModel());
		jsp = new JScrollPane(jt);
		this.add(jsp, BorderLayout.CENTER);

		ButtonHeaderRenderer renderer = new ButtonHeaderRenderer();
		TableColumnModel model = jt.getColumnModel();
		int cCount = jt.getModel().getColumnCount();
		for (int i = 0; i < cCount; i++) {
			model.getColumn(i).setHeaderRenderer(renderer);
		}

		JTableHeader header = jt.getTableHeader();
		header.addMouseListener(new HeaderListener(header, renderer));

		JLabel jlSouth = new JLabel("Please don't use this functionality during an experiment...");
		jlSouth.setForeground(Color.red);
		this.add(jlSouth, BorderLayout.SOUTH);

		JFrame jf = new JFrame();
		jf.getContentPane().add(this);
		jf.pack();
		jf.setVisible(true);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		setLayout(new java.awt.BorderLayout());
	}// </editor-fold>//GEN-END:initComponents

	// Variables declaration - do not modify//GEN-BEGIN:variables
	// End of variables declaration//GEN-END:variables

	public void showUI(int column, boolean show) {
		((JReplayTableModel) jt.getModel()).showUI(column, show);
	}

	class HeaderListener extends MouseAdapter {
		JTableHeader header;

		ButtonHeaderRenderer renderer;

		HeaderListener(JTableHeader header, ButtonHeaderRenderer renderer) {
			this.header = header;
			this.renderer = renderer;
		}

		public void mousePressed(MouseEvent e) {
			int col = header.columnAtPoint(e.getPoint());
			renderer.setPressedColumn(col);
			header.repaint();

			System.out.println("Ouch! " + col);
		}

		public void mouseReleased(MouseEvent e) {
			int col = header.columnAtPoint(e.getPoint());
			// renderer.setPressedColumn(col); // clear
			header.repaint();
		}
	}

	class ButtonHeaderRenderer extends JToggleButton implements TableCellRenderer {
		Hashtable ht = new Hashtable();
		int pushedColumn = -1;

		public ButtonHeaderRenderer() {
			pushedColumn = -1;
			// setMargin(new Insets(0, 0, 0, 0));
		}

		public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus,
				int row, int column) {
			JToggleButton jtb = (JToggleButton) ht.get(new Integer(column));
			if (jtb == null) {
				jtb = new JToggleButton();
				jtb.setText((String) value);
				ht.put(new Integer(column), jtb);
			}

			if (2 < 5)
				return jtb;
			setText((value == null) ? "" : value.toString());
			boolean isPressed = (column == pushedColumn);
			getModel().setPressed(isPressed);
			getModel().setArmed(isPressed);
			return this;
		}

		public void setPressedColumn(int col) {
			JToggleButton jtb = (JToggleButton) ht.get(new Integer(col));
			if (jtb == null) {
				jtb = new JToggleButton();
				ht.put(new Integer(col), jtb);
			}
			if (jtb.getModel().isPressed()) {
				jtb.getModel().setPressed(false);
				showUI(col, true);
			} else if (!jtb.getModel().isPressed()) {
				jtb.getModel().setPressed(true);
				showUI(col, false);
			}
		}
	}
}
